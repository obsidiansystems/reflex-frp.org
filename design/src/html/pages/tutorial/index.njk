{% extends "boilerplate.njk" %}

{% block extras %}
  {% include "partials/mobile-nav/tutorial.njk" %}
{% endblock %}

{% block body %}

  <div class="flex max-w-screen-xl">

    <nav class="hidden md:block w-1/4 flex-shrink-0 bg-gray-100 px-6 py-12">
      <ul class="standard-links space-y-2">
        <li><a href="" class="">Tutorial</a></li>
        <li><a href="" class="">The structure of this document</a></li>
        <li>
          <ul class="ml-4 space-y-2">
            <li><a href="" class="">Literate Haskell</a></li>
            <li><a href="" class="">Running the code</a></li>
            <li><a href="" class="">Navigating to particular tutorial snippets</a></li>
            <li><a href="" class="">Imports and extensions</a></li>
          </ul>
        </li>
        <li><a href="" class="">DOM Basics</a></li>
        <li>
          <ul class="ml-4 space-y-2">
            <li><a href="" class="">Dynamics and Events</a></li>
            <li><a href="" class="">A Number Input</a></li>
            <li><a href="" class="">Adding</a></li>
            <li><a href="" class="">Supporting Multiple Operations</a></li>
            <li><a href="" class="">Events and State Machines</a></li>
            <li><a href="" class="">Number Pad</a></li>
            <li><a href="" class="">A Minimal Four Function Calculator</a></li>
            <li><a href="" class="">Dynamic Attributes and Cyclic Dependencies</a></li>
            <li><a href="" class=""></a></li>
          </ul>
        </li>
        <li><a href="" class="">In Summary</a></li>
      </ul>
    </nav>

    <div class="px-6 sm:px-8 lg:px-12">
      <section>
        <h1 class="font-display text-4xl sm:text-5xl lg:text-6xl mb-8">Tutorial</h1>
        <p class="text-gray-500 mb-4 md:text-lg">In this example, we'll be following Luite Stegemann's lead and building a simple functional reactive calculator to be used in a web browser or as a desktop or mobile app.</p>
        <hr class="h-1 rounded-full bg-gray-200 border-none my-12">
      </section>

      <section class="standard-links">
        <h2 class="font-semibold text-3xl sm:text-4xl mb-4 mt-20">The structure of this document</h2>

        <h3 class="font-semibold text-xl sm:text-2xl mb-4 mt-12">Literate Haskell</h3>
        <p class="body-copy">This document is a <a href="">literate haskell</a> source file written in markdown. We're using <a href="">markdown-unlit</a> to process this source file and turn it into something our compiler can understand.</p>

        <h3 class="font-semibold text-xl sm:text-2xl mb-4 mt-12">Running the code</h3>
        <p class="body-copy">You can run this tutorial by:</p>
        <!-- <ol class="list-disc list ml-10 space-y-4"> -->
          <!-- <li> -->
            <p class="body-copy">
              <span class="text text-xl">1.</span>
              <a href="">Installing obelisk</a>, a framework and development tool for multi-platform Haskell applications.
            </p>
          <!-- </li> -->
          <!-- <li> -->
            <p class="body-copy">
              Cloning the calculator-tutorial repository.
            </p>
            <pre class="mb-4"><code class="language-bash">git clone git@github.com:obsidiansystems/calculator-tutorial</code></pre>
          <!-- </li> -->
          <!-- <li> -->
            <p class="body-copy">
              Running the application with the ob command.
            </p>
            <pre class="mb-4"><code class="language-bash">cd calculator-tutorial
ob run</code></pre>
          <!-- </li> -->
          <!-- <li> -->
            <p class="body-copy">
              Navigating to <a href="">http://localhost:8000</a>. If you want to run it at a different hostname or port, modify the <code class="inline-code">config/common/route</code> configuration file.
            </p>
          <!-- </li> -->
        <!-- </ol> -->

        <h3 class="font-semibold text-xl sm:text-2xl mb-4 mt-12">Navigating to particular tutorial snippets</h3>
        <p class="body-copy">Over the course of this tutorial, we're going to progressively build a calculator application. Each step in the process of constructing the calculator will be a numbered function in this document. For example, the first function is <code class="inline-code">tutorial1</code>, below.</p>
        <p class="body-copy">To see what the code in <code class="inline-code">tutorial1</code> does when it runs, you can navigate to <code class="inline-code">/tutorial/1</code>. The same applies to any other numbered function: just change the number at the end of the url to match that of the function you'd like to see in action.</p>

        <h3 class="font-semibold text-xl sm:text-2xl mb-4 mt-12">Imports and extensions</h3>
        <p class="body-copy">Because this is one big source file, all of our functions will share a set of imports and language extensions, declared here:</p>
        <pre class="mb-4"><code class="language-haskell">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecursiveDo #-}
{-# LANGUAGE ScopedTypeVariables #-}

module Tutorial where

import Reflex
import Reflex.Dom
import Data.Map (Map)
import qualified Data.Map as Map
import Data.Text (pack, unpack, Text)
import qualified Data.Text as T
import Text.Read (readMaybe)
import Control.Applicative ((<*>), (<$>))
import Control.Monad.Fix (MonadFix)</code></pre>
        <p class="body-copy">That's all for the preliminaries. Let's get to it!</p>
      </section>

      <section>
        <h2 class="font-semibold text-3xl sm:text-4xl mb-4 mt-20">DOM Basics</h2>
        <h3 class="font-semibold text-xl sm:text-2xl mb-4 mt-12">Reflex-FRP Basics</h3>
        <p class="body-copy">Existing content...</p>

        <aside class="mx-4 sm:mx-8 my-8 pl-4 border-purple-700 border-l-3">
          <p class="font-bold body-copy">Sidebar: Interpreting the MonadWidget type</p>
          <p class="body-copy">FRP-enabled datatypes in Reflex take an argument t, which identifies the FRP subsystem being used. This ensures that wires don't get crossed if a single program uses Reflex in multiple different contexts. You can think of t as identifying a particular "timeline" of the FRP system.</p>
          <p class="body-copy">Because most simple programs will only deal with a single timeline, we won't revisit the t parameters in this tutorial. As long as you make sure your <span class="inline-code">Event</span>, <span class="inline-code">Behavior</span>, and <span class="inline-code">Dynamic</span> values all get their t argument, it'll work itself out.</p>
        </aside>

        <p class="body-copy">In our example, <span class="inline-code">el "div" $ text "Welcome to Reflex"</span>, the first argument to el was "div", indicating that we are going to produce a div element.</p>

      </section>
    </div>

  </div>

{% endblock %}
